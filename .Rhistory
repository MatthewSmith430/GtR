return(FUR)
}
FFund<-gtr_further_funding_check(url)
PROJ<-tibble::tibble(project_title=ORG$project$title,
project_ref=ORG$project$grantReference,
abstract_text=ORG$project$abstractText,
project_value=ORG$project$fund$valuePounds,
start_date=ORG$project$fund$start,
end_date=ORG$project$fund$end,
funder=ORG$project$fund$funder$name,
topic=top,
subject=paste(sub1$text,collapse="_"),
num_collaboration_output=CO_imp,
num_intellectual_property_output=IP_imp,
num_policy_influence_output=POL_imp,
num_research_material_output=RM_imp,
num_artistic_creative_product_output=ART_imp,
num_software_technical_product_output=SOFT_imp,
num_research_database_model_output=RESDATA_imp,
num_spinout_output=SPIN_imp,
num_impact_summary_output=SUM_imp,
further_funding=FFund,
num_further_funding_output=FUR_imp,
num_other_research_output=ORO_imp,
num_exploitation_output=EXPL_imp,
num_dissemination_output=DISS_imp,
num_publications=PUB,
num_journal_articles=JPUB_num
)
OM<-ORG$organisationRole
#ORG$organisationRole
OMR1<-purrr::map_df(OM$roles,data.frame)
OMR<-OMR1$name
POSTCODE<-OM$address.postCode
post_check<-is.null(POSTCODE)
if (post_check==TRUE){
POSTCODE1<-rep(NA,length(unlist(OM$name)))
}else{
POSTCODE1<-POSTCODE
}
REGION<-OM$address.region
region_check<-is.null(REGION)
if (region_check==TRUE){
REGION1<-rep(NA,length(unlist(OM$name)))
}else{
REGION1<-REGION
}
OrgRole<-data.frame(name=unlist(OM$name),
org_role=OMR,
org_region=REGION1,
org_postcode=POSTCODE1)
MEMBERS<-tibble::tibble(org=OM$name)
M2<-MEMBERS[1,]
DF1<-dplyr::bind_cols(M2,PROJ)
if (length(MEMBERS$org)>1){
DF1[2:length(MEMBERS$org),]<-NA
DF1$org<-MEMBERS$org
DF2<-tidyr::fill(DF1,colnames(PROJ))
}else{DF2<-DF1}
DF2$project_title<-gsub("&amp;","and",DF2$project_title)
DF3<-merge(DF2,OrgRole,by.x="org",by.y ="name",all.x=TRUE)
START_YEAR1<-as.Date(DF3$start_date,origin = "1899-12-30")
DF3$start_date
install.packages("anytime")
START_YEAR1<-anytime::anytime(DF3$start_date)
START_YEAR1
START_YEAR<-lubridate::year(START_YEAR1)
START_YEAR1<-as.Date(as.POSIXct(DF3$start_date, origin="1970-01-01"))
START_YEAR<-lubridate::year(START_YEAR1)
DF3$start_date[[1]]
DF3$start_date[[1]]|>as.character()
START_YEAR1<-lubridate::as_datetime(DF3$start_date)
START_YEAR1<-as.Date(as.POSIXct(DF3$start_date/1000, origin="1970-01-01"))
START_YEAR<-lubridate::year(START_YEAR1)
START_YEAR1<-anytime::anytime(DF3$start_date/1000)
START_YEAR<-lubridate::year(START_YEAR1)
END_YEAR1<-anytime::anytime(DF3$end_date/1000)
END_YEAR<-lubridate::year(END_YEAR1)
DIFF<-as.vector(abs(difftime(START_YEAR1,END_YEAR1,units="weeks")))
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
PUB<-ORG$project$publication
View(PUB)
PUB<-dplr::select(PUB,-"authors")}
PUB<-dplr::select(PUB,-authors)
PUB<-dpylr::select(PUB,-authors)
PUB<-dplyr::select(PUB,-"authors")
View(PUB)
View(PUB)
PUB_date<-anytime::anytime(PUB$date/1000)
PUB<-dplyr::select(PUB,-"authors")
PUB<-ORG$project$publication
if (purrr::is_empty(PUB)==TRUE){
PUB<-dplyr::tibble(id=url,pub=0)
}else{
PUB<-dplyr::select(PUB,-"authors")
PUB_date<-anytime::anytime(PUB$date/1000)
PUB$date<-PUB_date
}
View(PUB)
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_id<-ORG$project$grantReference
pt<-ORG$project$title
imp<-ORG$project$output
PUB<-ORG$project$publication
COL_PUB<- "parentPublicationTitle" %in% colnames(PUB)
EMP<-purrr::is_empty(PUB)
PUB11<-data.frame(project_id=proj_id,
Title=NA,
year=NA,
freq_per_year=0,
H_index=0,
SJR=0,
SJR_mult_freq=0,
H_index_mult_freq=0)
if (COL_PUB==FALSE& EMP==FALSE){
PUB11<-data.frame(project_id=proj_id,
Title=NA,
year=NA,
freq_per_year=0,
H_index=0,
SJR=0,
SJR_mult_freq=0,
H_index_mult_freq=0)
}else if(COL_PUB==FALSE& EMP==TRUE){
PUB11<-data.frame(project_id=proj_id,
Title=NA,
year=NA,
freq_per_year=0,
H_index=0,
SJR=0,
SJR_mult_freq=0,
H_index_mult_freq=0)
}else{
PUB2<-dplyr::filter(PUB,!is.na(parentPublicationTitle))
PUB3<-dplyr::select(PUB2,parentPublicationTitle,date)
PUB4<-dplyr::mutate(PUB3,year=lubridate::year(PUB3$date))
PUB5<-dplyr::group_by(PUB4,parentPublicationTitle,year)
PUB6<-dplyr::rename(dplyr::count(PUB5, parentPublicationTitle,year), Freq = n)
PUB7<-dplyr::mutate(PUB6,project_id=proj_id)
colnames(PUB7)<-c("Title","year","freq_per_year","project_id")
PUB8<-dplyr::select(PUB7,project_id,Title,year,freq_per_year)
PUB8$Title<-tolower(PUB8$Title)
PUB8$Title<-gsub("&","and",PUB8$Title)
JOURNAL_DATA<-base::get("JOURNAL_DATA")
PUB9<-dplyr::left_join(PUB8,JOURNAL_DATA, by=c("Title","year"))
PUB10<-dplyr::mutate(PUB9,SJR_mult_freq=SJR*freq_per_year)
PUB11<-dplyr::mutate(PUB10,H_index_mult_freq=H_index*freq_per_year)
if (length(PUB11$project_id)==0){
PUB11<-data.frame(project_id=proj_id,
Title=NA,
year=NA,
freq_per_year=0,
H_index=0,
SJR=0,
SJR_mult_freq=0,
H_index_mult_freq=0)
}else{
PUB11<-PUB11
}
}
JOURNAL_DATA<-base::get("JOURNAL_DATA")
load("C:/Users/matt_/Documents/Github/GtR/data/JOURNAL_DATA.rda")
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_id<-ORG$project$grantReference
pt<-ORG$project$title
imp<-ORG$project$output
PUB<-ORG$project$publication
COL_PUB<- "parentPublicationTitle" %in% colnames(PUB)
EMP<-purrr::is_empty(PUB)
if (COL_PUB==FALSE& EMP==FALSE){
PUB11<-data.frame(project_id=proj_id,
Title=NA,
year=NA,
freq_per_year=0,
H_index=0,
SJR=0,
SJR_mult_freq=0,
H_index_mult_freq=0)
}else if(COL_PUB==FALSE& EMP==TRUE){
PUB11<-data.frame(project_id=proj_id,
Title=NA,
year=NA,
freq_per_year=0,
H_index=0,
SJR=0,
SJR_mult_freq=0,
H_index_mult_freq=0)
}else{
PUB2<-dplyr::filter(PUB,!is.na(parentPublicationTitle))
PUB3<-dplyr::select(PUB2,parentPublicationTitle,date)
PUB4<-dplyr::mutate(PUB3,year=lubridate::year(anytime::anytime((PUB3$date))))
PUB5<-dplyr::group_by(PUB4,parentPublicationTitle,year)
PUB6<-dplyr::rename(dplyr::count(PUB5, parentPublicationTitle,year), Freq = n)
PUB7<-dplyr::mutate(PUB6,project_id=proj_id)
colnames(PUB7)<-c("Title","year","freq_per_year","project_id")
PUB8<-dplyr::select(PUB7,project_id,Title,year,freq_per_year)
PUB8$Title<-tolower(PUB8$Title)
PUB8$Title<-gsub("&","and",PUB8$Title)
JOURNAL_DATA<-base::get("JOURNAL_DATA")
PUB9<-dplyr::left_join(PUB8,JOURNAL_DATA, by=c("Title","year"))
PUB10<-dplyr::mutate(PUB9,SJR_mult_freq=SJR*freq_per_year)
PUB11<-dplyr::mutate(PUB10,H_index_mult_freq=H_index*freq_per_year)
if (length(PUB11$project_id)==0){
PUB11<-data.frame(project_id=proj_id,
Title=NA,
year=NA,
freq_per_year=0,
H_index=0,
SJR=0,
SJR_mult_freq=0,
H_index_mult_freq=0)
}else{
PUB11<-PUB11
}
}
View(PUB11)
PUB2<-dplyr::filter(PUB,!is.na(parentPublicationTitle))
PUB3<-dplyr::select(PUB2,parentPublicationTitle,date)
View(PUB3)
PUB4<-dplyr::mutate(PUB3,year=lubridate::year(anytime::anytime((PUB3$date))))
View(PUB4)
PUB4<-dplyr::mutate(PUB3,year=lubridate::year(anytime::anytime((PUB3$date/1000))))
PUB5<-dplyr::group_by(PUB4,parentPublicationTitle,year)
PUB6<-dplyr::rename(dplyr::count(PUB5, parentPublicationTitle,year), Freq = n)
PUB7<-dplyr::mutate(PUB6,project_id=proj_id)
colnames(PUB7)<-c("Title","year","freq_per_year","project_id")
PUB8<-dplyr::select(PUB7,project_id,Title,year,freq_per_year)
PUB8$Title<-tolower(PUB8$Title)
PUB8$Title<-gsub("&","and",PUB8$Title)
JOURNAL_DATA<-base::get("JOURNAL_DATA")
PUB9<-dplyr::left_join(PUB8,JOURNAL_DATA, by=c("Title","year"))
PUB10<-dplyr::mutate(PUB9,SJR_mult_freq=SJR*freq_per_year)
PUB11<-dplyr::mutate(PUB10,H_index_mult_freq=H_index*freq_per_year)
View(PUB11)
if (length(PUB11$project_id)==0){
PUB11<-data.frame(project_id=proj_id,
Title=NA,
year=NA,
freq_per_year=0,
H_index=0,
SJR=0,
SJR_mult_freq=0,
H_index_mult_freq=0)
}else{
PUB11<-PUB11
}
View(PUB11)
View(JOURNAL_DATA)
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_id<-ORG$project$grantReference
imp<-ORG$project$output
ip_df<-imp$intellectualPropertyOutput
CHECK<-purrr::is_empty(ip_df)
if (CHECK==TRUE){
ip_df<-data.frame(project_id=proj_id,
ip_category=NA,
description=NA,
protection=NA,
yearProtectionGranted=NA,
licensed=NA,
patent_id=NA)
}else{
ip_df<-dplyr::mutate(ip_df,project_id=proj_id,
ip_category=protection)
patent_id<-ip_df$patentId
HHH<-colnames(ip_df)
YC<-"yearProtectionGranted" %in% HHH
LEN<-length(ip_df$id)
NA_info<-rep(NA,LEN)
if (YC==FALSE){
ip_df<-dplyr::mutate(ip_df,yearProtectionGranted=NA_info)
}else{
ip_df<-ip_df
}
DC<-"description"%in%HHH
if (DC==FALSE){
ip_df<-dplyr::mutate(ip_df,description=NA_info)
}else{
ip_df<-ip_df
}
ip_df<-dplyr::select(ip_df,project_id,ip_category,
description,protection,yearProtectionGranted,
licensed)
PC<-purrr::is_empty(patent_id)
if (PC==TRUE){
patent_id_data<-rep(NA,length(ip_df$project_id))
}else{
patent_id_data<-patent_id
}
ip_df<-dplyr::mutate(ip_df,patent_id=patent_id_data)
}
IP_DATA<-gtr_ip(url)
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
pt<-ORG$project$title
pti<-ORG$project$id
imp<-ORG$project$output
imp_df<-purrr::map_df(imp,data.frame)
View(imp)
imp<-ORG$project$output$impactSummaryOutputs
imp_df<-purrr::map_df(imp,data.frame)
View(imp)
imp$outcomeId
imp$contributionMethod
imp$impactTypes
imp
imp_df<-data.frame(impact_desc=imp$description,impact_first_year=imp$firstYearOfImpact,
impact_sector=imp$sector,impact_types=unlist(imp$impactTypes))
View(imp_df)
imp_df<-data.frame(impact_desc=imp$description,impact_first_year=imp$firstYearOfImpact,
impact_sector=imp$sector,impact_types=unlist(imp$impactTypes))
imp_df2<-dplyr::mutate(imp_df,project=pt,project_id=pti)
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_id<-ORG$project$grantReference
imp<-ORG$project$output
funding_df<-imp$furtherFundingOutput
CHECK<-is.list(funding_df)
FUR<-FALSE
View(funding_df)
FFdf<-dplyr::mutate(funding_df,project_id=proj_id)
FFdf<-dplyr::mutate(funding_df,project_id=proj_id)
FFdf$start<-lubridate::year(anytime::anytime(FFdf$start/1000))
FFdf$end<-lubridate::year(anytime::anytime(FFdf$end/1000))
POL1<-gtr_policy(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_id<-ORG$project$grantReference
imp<-ORG$project$output
pol_imp<-imp$policyInfluenceOutput
desc<-pol_imp$description
pol_type<-pol_imp$type
impact<-pol_imp$impact
geo<-pol_imp$geographicReach
LEN<-length(desc)
ref_rep<-rep(proj_id,LEN)
DATA<-tibble::tibble(project_id=ref_rep,
policy_influence_type=pol_type,
description=desc,
impact=impact,
geographic_region=geo)
View(DATA)
#' @title gtr_policy
#'
#' @description This function provides the policy influence items for a project
#' @param url project URL from gtr.ukri.org
#' @export
#' @return Dataframe with projects and policy outcome
gtr_policy<-function(url){
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_id<-ORG$project$grantReference
imp<-ORG$project$output
pol_imp<-imp$policyInfluenceOutput
desc<-pol_imp$description
pol_type<-pol_imp$type
impact<-pol_imp$impact
geo<-pol_imp$geographicReach
LEN<-length(desc)
ref_rep<-rep(proj_id,LEN)
DATA<-tibble::tibble(project_id=ref_rep,
policy_influence_type=pol_type,
description=desc,
impact=impact,
geographic_region=geo)
return(DATA)
}
POL1<-gtr_policy(url)
POL2<-dplyr::group_by(POL1,
geographic_region)
POL3<-dplyr::tally(POL2)
proj_id<-unique(POL1$project_id)
POL4<-dplyr::mutate(POL3,project_id=proj_id)
POL5<-dplyr::rename(POL4,freq=n)
POL6<-dplyr::select(POL5,project_id,
dplyr::everything())
View(POL6)
studentship_id<-"2588529"
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_title<-ORG$project$title
proj_id<-ORG$project$grantReference
student_supervisor<-ORG$personRole
OMR<- sapply(unlist(student_supervisor$role,
recursive=FALSE, use.names=FALSE), "[", 1)
student_supervisor<-dplyr::mutate(student_supervisor,role=OMR,project_id=proj_id,
person_url=url,project_title=proj_title)
student_supervisor<-dplyr::select(student_supervisor,project_id,
project_title,role,firstName,
otherNames,surname,person_url)
student_supervisor<-ORG$personRole
View(ORG)
url<-paste0("https://gtr.ukri.org/api/projects?ref=studentship-",studentship_id)
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
View(OMR1)
View(ORG)
proj_title<-ORG$project$title
proj_id<-ORG$project$grantReference
student_supervisor<-ORG$personRole
View(student_supervisor)
ORG$personRole
supervisor<-ORG$personRole$supervisor
student<-ORG$personRole$student
supervisor<-ORG$personRole$firstName
student_supervisor<-data.frame(first_name=ORG$personRole$firstName,
last_name=ORG$personRole$surname,role=ORG$personRole$roles,project_id=proj_id)
View(student_supervisor)
proj_id<-ORG$project$grantReference
student_supervisor<-data.frame(first_name=ORG$personRole$firstName,
last_name=ORG$personRole$surname,role=ORG$personRole$roles,project_id=proj_id)
ORG$personRole$firstName
ORG$personRole$surname
ORG$personRole$roles
role<-ORG$personRole
View(role)
role<-unlist(ORG$personRole$roles)
role<-purrr::map_df(ORG$personRole$roles,data.frame)
View(RM)
View(role)
student_supervisor<-data.frame(first_name=ORG$personRole$firstName,
last_name=ORG$personRole$surname,role=role,project_id=proj_id)
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_id<-ORG$project$grantReference
COL<-ORG$project$output$collaborationOutput
url<-"https://gtr.ukri.org/api/projects?ref=EP%2FV042432%2F1"
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_id<-ORG$project$grantReference
COL<-ORG$project$output$collaborationOutput
proj_id<-ORG$project$grantReference
proj_title
COL<-ORG$project$output$collaborationOutput
COL2<-dplyr::select(COL,description,
collaboratingOrganisation,
piContribution,impact)
OM<-ORG$organisationRole
url<-"https://gtr.ukri.org/api/projects?ref=EP%2FV027050%2F1"
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
proj_id<-ORG$project$grantReference
COL<-ORG$project$output$collaborationOutput
COL2<-dplyr::select(COL,description,
collaboratingOrganisation,
piContribution,impact)
OM<-ORG$organisationRole
OMR<- sapply(unlist(OM$role,
recursive=FALSE, use.names=FALSE), "[", 1)
OrgRole<-data.frame(name=unlist(OM$name),
org_role=OMR)
PID2<-rep(proj_id,length(OrgRole$name))
COL_DF<-merge(OrgRole,COL,by.x="name",by.y="collaboratingOrganisation",all.x = TRUE)
COL_DF<-dplyr::mutate(COL_DF,project_id=PID2)
OM<-ORG$organisationRole
OM<-ORG$organisationRole
View(OM)
OMR<-purrr::map_df(OM$roles,data.frame)
View(OMR)
OMRa<-purrr::map_df(OM$roles,data.frame)
OMR<- OMRa$name
OrgRole<-data.frame(name=unlist(OM$name),
org_role=OMR)
PID2<-rep(proj_id,length(OrgRole$name))
COL_DF<-merge(OrgRole,COL,by.x="name",by.y="collaboratingOrganisation",all.x = TRUE)
COL_DF<-dplyr::mutate(COL_DF,project_id=PID2)
View(COL_DF)
COL_DF<-dplyr::mutate(COL_DF,project_id=proj_id)
firmTEST<-httr::GET(url,httr::add_headers("Accept: application/vnd.rcuk.gtr.json-v7"))
firmTEXT<-httr::content(firmTEST, as="text")
JLfirm<-jsonlite::fromJSON(firmTEXT, flatten=TRUE)
ORG<-JLfirm$projectOverview$projectComposition
pt<-ORG$project$title
pti<-ORG$project$id
pot_imp<-ORG$project$potentialImpactText
if(purrr::is_null(pot_imp)==TRUE){
pot_imp<-NA
}else{pot_imp<-pot_imp}
potential_imp<-dplyr::tibble(project=pt,project_id=pti,
potential_impact_statement=pot_imp)
View(potential_imp)
gc()
